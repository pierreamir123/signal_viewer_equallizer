# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QHBoxLayout, QVBoxLayout , QShortcut, QLabel, 
    QSlider, QStyle, QSizePolicy, QFileDialog
import sys
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtGui import QIcon, QPalette
from PyQt5.QtCore import Qt, QUrl,QTimer
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas
import scipy.io
from scipy import signal
import numpy as np
import matplotlib.pyplot as plt
import time
from pyqtgraph import PlotWidget
from reportlab.pdfgen import canvas
from reportlab.platypus import Frame, Image
from reportlab.lib.units import cm, inch
from reportlab.lib import utils
from reportlab.pdfgen import canvas
from reportlab.platypus import Frame, Image
from reportlab.lib.units import cm, inch
from reportlab.lib import utils
import pyqtgraph as pg
import pyqtgraph.exporters
from PyQt5.QtGui import QKeySequence

class T_tab:
     
    def __init__(self, t_num = 0 , parent = None):
        super().__init__()
        self.tab_num = t_num
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.filename = ''
        self.k = 0
        self.scaling_factor= 1000
        self.scaling_factor_i= 0
        self.zoom = 1
        self.int = 0
        self.fin = 1000
        self.size = 0
        self.signal_after_gain_1 = np.array([])
        self.signal_after_gain = np.array([])
        self.signal_output_1 = np.array([]) 
        self.spectro_freq_range_end = 1
        self.spectro_freq_range_int = 0
        self.timer = QtCore.QTimer()
        self.generation_status = 0
        self.generation_x = np.arange(0,10000,1)
        self.generation_y=0
        self.generation_max_freq = 0
        self.slider_spectro_status = 0
        self.initUI()
        
            
        
 
    def initUI(self):
        
        self.plot = PlotWidget(self.tab)
        self.plot.setGeometry(QtCore.QRect(40, 40, 861, 131))
        self.plot.setObjectName("plot")
        self.ploting = QtWidgets.QPushButton(self.tab)
        self.ploting.setGeometry(QtCore.QRect(40, 10, 93, 28))
        self.ploting.setObjectName("ploting")
        self.pausee = QtWidgets.QPushButton(self.tab)
        self.pausee.setGeometry(QtCore.QRect(140, 10, 93, 28))
        self.pausee.setObjectName("pause")
        self.zoomin = QtWidgets.QPushButton(self.tab)
        self.zoomin.setGeometry(QtCore.QRect(260, 10, 93, 28))
        self.zoomin.setObjectName("zoomin")
        self.zoomout = QtWidgets.QPushButton(self.tab)
        self.zoomout.setGeometry(QtCore.QRect(360, 10, 93, 28))
        self.zoomout.setObjectName("zoomout")
        self.generate_button = QtWidgets.QPushButton(self.tab)
        self.generate_button.setGeometry(QtCore.QRect(800, 10, 101, 31))
        self.generate_button.setObjectName("pushButton")
        self.generate_button.clicked.connect(self.plot_generation)
        self.signal_scroller = QSlider(self.tab)
        self.signal_scroller.setOrientation(QtCore.Qt.Horizontal)
        self.signal_scroller.setObjectName("horizontalScrollBar")
        self.signal_scroller.setGeometry(QtCore.QRect(40, 190, 861, 16))
        self.signal_scroller.setMinimum(0)
        self.signal_scroller.setTickPosition(QSlider.TicksBelow)
        self.signal_scroller.setTickInterval(10)
        self.signal_scroller.sliderMoved.connect(self.valuechange)
        self.signal_scroller.valueChanged.connect(self.valuechange)
        self.groupBox_3 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_3.setGeometry(QtCore.QRect(40, 350, 861, 172))
        self.groupBox_3.setObjectName("groupBox_3")
        self.spectro_4 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.spectro_4.setGeometry(QtCore.QRect(40, 60, 861, 131))
        self.spectro_4.setObjectName("spectro_4")
        self.spectro_max_slider = QtWidgets.QSlider(self.tab)
        self.spectro_max_slider.setGeometry(QtCore.QRect(980, 360, 21, 111))
        self.spectro_max_slider.setOrientation(QtCore.Qt.Vertical)
        self.spectro_max_slider.setObjectName("verticalSlider_7")
        self.spectro_max_lab = QtWidgets.QLabel(self.tab)
        self.spectro_max_lab.setGeometry(QtCore.QRect(970, 480, 47, 13))
        self.spectro_max_lab.setObjectName("spectro_max_lab")
        
        self.spectro_min_slider = QtWidgets.QSlider(self.tab)
        self.spectro_min_slider.setGeometry(QtCore.QRect(920, 360, 21, 111))
        self.spectro_min_slider.setOrientation(QtCore.Qt.Vertical)
        self.spectro_min_slider.setObjectName("verticalSlider_8")
        
        self.spectro_min_lab = QtWidgets.QLabel(self.tab)
        self.spectro_min_lab.setGeometry(QtCore.QRect(910, 480, 47, 13))
        self.spectro_min_lab.setObjectName("spectro_min_lab")
        self.comboBox = QtWidgets.QComboBox(self.tab)
        self.comboBox.setGeometry(QtCore.QRect(918, 520, 91, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("viridis")
        self.comboBox.addItem("inferno")
        self.comboBox.addItem("magma")
        self.comboBox.addItem("cividis")
        self.comboBox.addItem("plasma")
        self.hide_spectro = QtWidgets.QRadioButton(self.tab)
        self.hide_spectro.setGeometry(QtCore.QRect(700, 520, 101, 21))
        self.hide_spectro.setObjectName("hide_spectro")
        self.groupBox = QtWidgets.QGroupBox(self.tab)
        self.groupBox.setGeometry(QtCore.QRect(1030, 20, 251, 421))
        self.groupBox.setObjectName("groupBox")
        self.verticalSlider = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider.setGeometry(QtCore.QRect(20, 50, 22, 160))
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.equalizer_lowest_lab = QtWidgets.QLabel(self.groupBox)
        self.equalizer_lowest_lab.setGeometry(QtCore.QRect(10,30 , 47, 13))
        self.equalizer_lowest_lab.setObjectName("lowest")
        self.gain_sliders(self.verticalSlider)
        self.verticalSlider.valueChanged.connect( lambda: self.gain_control(1,self.verticalSlider))
        self.verticalSlider_2 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_2.setGeometry(QtCore.QRect(60, 50, 22, 160))
        self.verticalSlider_2.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_2.setObjectName("verticalSlider_2")
        self.gain_sliders(self.verticalSlider_2)
        self.verticalSlider_2.valueChanged.connect(lambda:self.gain_control(2,self.verticalSlider_2))
        self.verticalSlider_3 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_3.setGeometry(QtCore.QRect(100, 50, 22, 160))
        self.verticalSlider_3.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_3.setObjectName("verticalSlider_3")
        self.gain_sliders(self.verticalSlider_3)
        self.verticalSlider_3.valueChanged.connect(lambda:self.gain_control(3,self.verticalSlider_3))
        self.verticalSlider_4 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_4.setGeometry(QtCore.QRect(140, 50, 22, 160))
        self.verticalSlider_4.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_4.setObjectName("verticalSlider_4")
        self.gain_sliders(self.verticalSlider_4)
        self.verticalSlider_4.valueChanged.connect(lambda:self.gain_control(4,self.verticalSlider_4))
        self.verticalSlider_5 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_5.setGeometry(QtCore.QRect(180, 50, 22, 160))
        self.verticalSlider_5.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_5.setObjectName("verticalSlider_5")
        self.gain_sliders(self.verticalSlider_5)
        self.verticalSlider_5.valueChanged.connect(lambda:self.gain_control(5,self.verticalSlider_5))
        self.verticalSlider_6 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_6.setGeometry(QtCore.QRect(20, 230, 22, 160))
        self.verticalSlider_6.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_6.setObjectName("verticalSlider_21")
        self.gain_sliders(self.verticalSlider_6)
        self.verticalSlider_6.valueChanged.connect(lambda:self.gain_control(6,self.verticalSlider_6))
        self.verticalSlider_7 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_7.setGeometry(QtCore.QRect(60, 230, 22, 160))
        self.verticalSlider_7.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_7.setObjectName("verticalSlider_22")
        self.gain_sliders(self.verticalSlider_7)
        self.verticalSlider_7.valueChanged.connect(lambda:self.gain_control(7,self.verticalSlider_7))
        self.verticalSlider_8 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_8.setGeometry(QtCore.QRect(100, 230, 22, 160))
        self.verticalSlider_8.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_8.setObjectName("verticalSlider_23")
        self.gain_sliders(self.verticalSlider_8)
        self.verticalSlider_8.valueChanged.connect(lambda:self.gain_control(8,self.verticalSlider_8))
        self.verticalSlider_9 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_9.setGeometry(QtCore.QRect(140, 230, 22, 160))
        self.verticalSlider_9.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_9.setObjectName("verticalSlider_24")
        self.gain_sliders(self.verticalSlider_9)
        self.verticalSlider_9.valueChanged.connect(lambda:self.gain_control(9,self.verticalSlider_9))
        self.verticalSlider_10 = QtWidgets.QSlider(self.groupBox)
        self.verticalSlider_10.setGeometry(QtCore.QRect(180, 230, 22, 160))
        self.verticalSlider_10.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_10.setObjectName("verticalSlider_25")
        self.gain_sliders(self.verticalSlider_10)
        self.equalizer_highest_lab = QtWidgets.QLabel(self.groupBox)
        self.equalizer_highest_lab.setGeometry(QtCore.QRect(170,390 , 47, 13))
        self.equalizer_highest_lab.setObjectName("highest")
        self.verticalSlider_10.valueChanged.connect(lambda:self.gain_control(10,self.verticalSlider_10))
        self.output = PlotWidget(self.tab)
        self.output.setGeometry(QtCore.QRect(40, 218, 861, 131))
        self.output.setObjectName("spectro_14")
        
        
        
        self.spectro_max_slider.valueChanged.connect(self.spectro_value_change)
        self.spectro_min_slider.valueChanged.connect(self.spectro_value_change)
        self.spectro_min_slider.sliderPressed.connect(self.spectro_value_change)
        self.spectro_max_slider.sliderPressed.connect(self.spectro_value_change)
        self.comboBox.activated.connect(self.plot_spectro)
        self.hide_spectro.toggled.connect(self.plot_spectro)
        
        self.InstrumentControl = QtWidgets.QGroupBox(self.tab)
        self.InstrumentControl.setGeometry(QtCore.QRect(10, 550, 491, 81))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.InstrumentControl.setPalette(palette)
        self.InstrumentControl.setObjectName("InstrumentControl")
        self.FilePathlabel_4 = QtWidgets.QLabel(self.InstrumentControl)
        self.FilePathlabel_4.setGeometry(QtCore.QRect(20, 20, 71, 16))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.FilePathlabel_4.setPalette(palette)
        self.FilePathlabel_4.setObjectName("FilePathlabel_4")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.InstrumentControl)
        self.textBrowser_4.setGeometry(QtCore.QRect(10, 40, 361, 31))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.Browse__ = QtWidgets.QPushButton(self.InstrumentControl)
        self.Browse__.setGeometry(QtCore.QRect(390, 40, 71, 28))
        self.Browse__.setObjectName("Browse__")
        self.ProcessControl = QtWidgets.QGroupBox(self.tab)
        self.ProcessControl.setGeometry(QtCore.QRect(990, 550, 291, 81))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.ProcessControl.setPalette(palette)
        self.ProcessControl.setObjectName("ProcessControl")
        self.Save__ = QtWidgets.QPushButton(self.ProcessControl)
        self.Save__.setGeometry(QtCore.QRect(20, 40, 93, 28))
        self.Save__.setObjectName("Save__")
        self.Report__ = QtWidgets.QPushButton(self.ProcessControl)
        self.Report__.setGeometry(QtCore.QRect(160, 40, 93, 28))
        self.Report__.setObjectName("Report__")
        self.zoomin.clicked.connect(lambda:self.zoom__("in"))
        self.zoomout.clicked.connect(lambda:self.zoom__("out"))
        self.fig1  = plt.figure() 
        self.ax = self.fig1.add_subplot() 
        self.spectro_la = Canvas(self.fig1)
        self.Browse__.clicked.connect(self.Browse_button)
        self.ploting.clicked.connect(self.plott)
        self.pausee.clicked.connect(self.pause)
        self.Save__.clicked.connect(self.save_)
        self.spectro_4.addWidget(self.spectro_la)
       
    ############################(((((   plot functions    )))))#################################################
        
    def plott(self):
        if not self.timer.isActive():
            self.status_zoom = 0
            self.status_slider = 0
            self.signal_after_gain = np.array(self.signal_after_gain)
            self.signal_output_1 = self.signal_after_gain_1.reshape(1,len(self.signal_values))
            self.fft_phase = np.angle(np.fft.fft(self.signal_values))
            self.spectro_amp =  self.signal_output_1[0]
            self.combined = np.multiply(self.signal_output_1[0], np.exp(1j*self.fft_phase))
            self.signal_output_1 =np.real(np.fft.ifft(self.combined))
            self.update_plot()
            self.plot_spectro()
            self.spectro_setting_sliders()
            self.timer.setInterval(100)
            self.timer.timeout.connect(self.update_plot)
            self.timer.start()
         
    def getFile(self):
        if self.generation_status == 0:
            self.filename = QFileDialog.getOpenFileName(filter="mat(*.mat)")[0]
            self.textBrowser_4 .setText(self.filename)
            self.scaling_factor = 1000
            self.scaling_factor_i= 0
            self.zoom = 1
            mat = scipy.io.loadmat(self.filename)
            ECG = mat['val']
            ecg = ECG[0]
            ECG = np.array(ecg)
            Time = np.array(range(len(ecg)))
            self.signal_time = Time
            self.signal_values = ECG
            self.signal_after_gain_1 = np.abs(np.fft.fft(self.signal_values))
            self.signal_after_gain_1 = np.array(np.array_split(self.signal_after_gain_1,10))
            
            self.signal_length = len (ECG) 
            self.plott()
        elif self.generation_status == 1:
            self.scaling_factor = 1000
            self.scaling_factor_i= 0
            self.zoom = 1
            self.generation_y = self.generate_sine_wave(0.5) + self.generate_sine_wave(2) + self.generate_sine_wave(5) 
            + self.generate_sine_wave(6)+ self.generate_sine_wave(15)+ self.generate_sine_wave(17)
            print(self.generation_y)
            self.signal_time = np.array(self.generation_x)
            self.signal_values = np.array(self.generation_y)
            self.signal_after_gain_1 = np.abs(np.fft.fft(self.signal_values))
            self.signal_after_gain_1 = np.array(np.array_split(self.signal_after_gain_1,10))
            self.signal_length = len ( self.signal_values)
            self.plott()
        
    def update_plot(self):
        self.plot.clear()
        self.output.clear()
        if self.generation_status == 0 :
            self.plot.setYRange(np.min(self.signal_values),np.max(self.signal_values))
            increment = 10
            increment_scale = 10
            limit = 1000
        else:
            increment = 5
            increment_scale = 10
            limit = 1000

        if self.k == 0 :
            self.plot.setXRange( 0  , self.scaling_factor )
            self.output.setXRange( 0  , self.scaling_factor )
        elif self.k >= limit and self.status_slider == 0 and self.timer.isActive()  :
            self.plot.setXRange( self.scaling_factor_i  , self.scaling_factor )
            self.output.setXRange( self.scaling_factor_i  , self.scaling_factor )
            self.scaling_factor = self.scaling_factor + increment_scale
            self.scaling_factor_i = self.scaling_factor_i + increment_scale
        elif self.size > 0:
            self.plot.setXRange( (self.int + self.size ) , (self.fin +self.size) )
            self.output.setXRange( (self.int + self.size ) , (self.fin +self.size) )
            print("scale")
            
        self.plt = self.plot.plot( self.signal_time[0:self.k],self.signal_values[0:self.k])
        self.plt = self.output.plot( self.signal_time[0:self.k],self.signal_output_1[0:self.k])
        

        if self.status_zoom == 0 and  self.status_slider == 0 and self.timer.isActive() :
            self.k = self.k +increment
        self.signal_scroller.setMaximum(self.signal_time[self.k] )
        
        if self.k > np.max(self.signal_time):
            self.timer.stop()
            self.k= 0
            self.scaling_factor = 1000
            self.scaling_factor_i= 0
            self.zoom = 1

   
            
        

    def plot_spectro(self):
    
        if self.hide_spectro.isChecked() == True :
            self.ax.clear()
            self.spectro_la.draw()
            self.fig1.canvas.draw()
        
        else:
            self.ax.clear()
            if self.generation_status == 1:
                FS = 2*self.generation_max_freq
            else:
                # FS=np.abs(np.max(np.fft.fft(self.signal_output_1)))
                FS = 30
            # self.ax.specgram(self.signal_output_1,Fs = self.spectro_freq_range )
            print(FS)

            self.freqs, self.times, self.Sx = signal.spectrogram(self.signal_output_1, fs=FS
                                            , window='hanning',nfft=264,noverlap=10,
                                        detrend=False,mode  = 'magnitude',scaling ='density')
            
            if self.slider_spectro_status == 0:
                self.max_freq = np.max(self.freqs)
                self.ax.set_ylim([0,self.max_freq])
            else:
                
                self.ax.set_ylim([self.spectro_freq_range_int,self.spectro_freq_range_end])
                
            self.ax.pcolormesh(self.times, self.freqs  , self.Sx, cmap=self.comboBox.currentText())
            self.ax.set_ylabel('Frequency [kHz]')
            self.ax.set_xlabel('Time [s]');
            self.spectro_la.draw()
            self.fig1.canvas.draw()
            self.slider_spectro_status = 0

    


    ############################(((((   Sliders functions    )))))#################################################

    def spectro_setting_sliders(self) :
        self.max_freq = np.max(self.freqs)
        self.min_freq = 0
        self.spectro_max_slider.setTickPosition(QSlider.TicksRight)
        self.spectro_max_slider.setMinimum(self.min_freq)
        self.spectro_max_slider.setMaximum(self.max_freq)
        self.spectro_max_slider.setValue(self.max_freq)
        self.spectro_min_slider.setTickPosition(QSlider.TicksRight)
        self.spectro_min_slider.setMaximum(self.max_freq)
        self.spectro_min_slider.setMinimum(self.min_freq)
        self.spectro_min_slider.setValue(self.min_freq)
        


    def spectro_value_change(self):
        self.slider_spectro_status = 1
        if self.spectro_max_slider.value() > self.spectro_min_slider.value():
            self.spectro_freq_range_end = self.spectro_max_slider.value()
            self.spectro_freq_range_int = self.spectro_min_slider.value()
            self.plot_spectro()
        else:
            self.spectro_max_slider.setValue(self.spectro_freq_range_end)
            self.spectro_min_slider.setValue(self.spectro_freq_range_int)
           
    def valuechange(self):
        self.status_slider = 1
        if not self.filename == '' or self.generation_status==1:
            self.timer.stop()
            self.size = self.signal_scroller.value()
            print("scale")
            self.update_plot()

    ############################(((((   Generation functions    )))))#################################################


    def generate_sine_wave(self,freq):
        if freq > self.generation_max_freq:
            self.generation_max_freq = freq
        frequencies = self.generation_x * freq
        y = np.sin((2 * np.pi) * frequencies)
        return y

    def plot_generation(self):
        self.generation_status = 1 
        self.getFile()

    def gain_sliders(self , Slider ) :
        Slider.setTickPosition(QSlider.TicksRight)
        Slider.setTickInterval(1)
        Slider.setSingleStep(1)
        Slider.setValue(1)
        Slider.setMinimum(0.1)
        Slider.setMaximum(5)

    ############################(((((   Buttons functions    )))))#################################################


    def Browse_button(self):
        self.generation_status = 0
        self.getFile()
    
    def pause(self):
        self.timer.stop()

    def save_(self):
        exporter = pyqtgraph.exporters.ImageExporter(self.plot.scene())
        # save to file
        exporter.export( str(self.tab_num)+'.png')
        # save to file
        self.fig1.savefig('sp'+str(self.tab_num)+'.png')
    
    def zoom__(self,zoom_direc): # if zoom_direc = 1 (zoom in) & zoom_direc = 0 (zoom in)
        self.timer.stop()
        self.size= 3
        self.status_zoom = 1
        self.status_slider =1
        if zoom_direc == "in" :
            if self.zoom > 1 :
                self.zoom = self.zoom / 2
                self.fin = self.fin / 2
            elif self.zoom >=0.25 and self.zoom <= 1 :
                self.zoom = self.zoom / 2
                self.fin = self.fin * self.zoom
            self.update_plot()   
        else:
            if self.zoom < 1 :
                self.zoom = self.zoom * 2
                self.fin = self.fin *2
            elif self.zoom<5 and self.zoom >=1 :
                self.zoom = self.zoom * 2
                self.fin = self.fin * self.zoom
            self.update_plot()

    ############################(((((   Equalizer functions    )))))#################################################

    def gain_control(self, band_num, gain ):
        
        band_num = band_num - 1
        self.fft_amplitude = np.abs(np.fft.fft(self.signal_values))
        self.fft_bandwith = np.array_split(self.fft_amplitude,10)
        self.fft_bandwith[band_num] =  self.fft_bandwith[band_num] * gain.value()
        self.signal_after_gain_1[band_num] = self.fft_bandwith[band_num]
        self.signal_after_gain = np.array(self.signal_after_gain_1)
        self.signal_output = self.signal_after_gain.reshape(1,self.signal_length)
        self.fft_phase = np.angle(np.fft.fft(self.signal_values))
        ccombined = np.multiply(self.signal_output[0], np.exp(1j*self.fft_phase))
        self.signal_output = np.real(np.fft.ifft(ccombined))
        self.signal_output_1 = self.signal_output
        self.update_plot() 
        self.plot_spectro() # update 
        self.plot_spectro() # due to the lag in viewing
        self.spectro_setting_sliders()
        
   
      
        

        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.InstrumentControl.setTitle(_translate("MainWindow", "Instrument control"))
        self.FilePathlabel_4.setText(_translate("MainWindow", "File Path"))
        self.Browse__.setText(_translate("MainWindow", "Browse"))
        self.ploting.setText(_translate("MainWindow", "play"))
        self.ProcessControl.setTitle(_translate("MainWindow", "Process control"))
        self.Save__.setText(_translate("MainWindow", "Save"))
        self.Report__.setText(_translate("MainWindow", "Report"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Spectrogram"))
        self.zoomin.setText(_translate("MainWindow", "zoom in"))
        self.pausee.setText(_translate("MainWindow", "pause"))
        self.zoomout.setText(_translate("MainWindow", "zoom out"))
        self.groupBox.setTitle(_translate("MainWindow", "Equalizer"))
        self.spectro_max_lab.setText(_translate("MainWindow", "    max"))
        self.spectro_min_lab.setText(_translate("MainWindow", "    min"))
        self.equalizer_lowest_lab.setText(_translate("MainWindow", "    lowest"))
        self.equalizer_highest_lab.setText(_translate("MainWindow", "    highest"))
        self.comboBox.setItemText(0, _translate("MainWindow", "viridis"))
        self.comboBox.setItemText(1, _translate("MainWindow", "inferno"))
        self.comboBox.setItemText(2, _translate("MainWindow", "magma"))
        self.comboBox.setItemText(3, _translate("MainWindow", "cividis"))
        self.comboBox.setItemText(4, _translate("MainWindow", "plasma"))
        self.hide_spectro.setText(_translate("MainWindow", "hide"))
        self.generate_button.setText(_translate("MainWindow", "generate"))
        self.generate_button.setShortcut(_translate("MainWindow", "Ctrl+G"))
        self.Browse__.setShortcut(_translate("MainWindow", "Ctrl+B"))
        self.hide_spectro.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.ploting.setShortcut(_translate("MainWindow", "Ctrl+P"))    
        self.pausee.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.zoomin.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.zoomout.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.Save__.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.Report__.setShortcut(_translate("MainWindow", "Ctrl+R"))
    
    
       
    



class TabButtonWidget(QtWidgets.QWidget):
    def __init__(self):
        super(TabButtonWidget, self).__init__()
        # Create button's
        self.button_add = QtWidgets.QPushButton("+")
        self.button_remove = QtWidgets.QPushButton("-")

        # Set button size
        self.button_add.setFixedSize(16, 16)
        self.button_remove.setFixedSize(16, 16)

        # Create layout
        self.layout = QtWidgets.QVBoxLayout()
        self.layout.setSpacing(0)
        self.layout.setContentsMargins(0, 0, 0, 0)

        # Add button's to layout
        self.layout.addWidget(self.button_add)
        self.layout.addWidget(self.button_remove)

        # Use layout in widget
        self.setLayout(self.layout)
       

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1357, 754)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(1, 0, 1351, 721))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_button = QtWidgets.QPushButton()
        self.tab = []
        self.tab_num_max = 10
        self.tab_num = 0
        self.tab_count = self.tabWidget.count()
        
        for i in range(10):
            self.tab.append(T_tab(i))

        self.tabWidget.tabBar().setMovable(True)
        self.tabWidget.insertTab(0,self.tab[0].tab , "")
        # Tab button's
        self.add_Widget =TabButtonWidget()
        self.right = self.tabWidget.tabBar().LeftSide
        
        self.tabWidget.tabBar().setTabButton(0, self.right,self.add_Widget)
        
        self.add_Widget.button_add.clicked.connect(self.add_tab)
        
        # Tab setting
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        for i in range(9):
            self.tab[i].retranslateUi(MainWindow)

        self.current_tab = self.tabWidget.currentIndex()
        self.tab[self.current_tab].Browse__.clicked.connect(self.formReport)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)

        
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        
      
    def add_tab(self):
        if self.tab_num < self.tab_num_max: 
            self.tab_num = self.tab_num + 1
            self.tabWidget.insertTab(self.tab_num,self.tab[self.tab_num].tab , "channel "+str(self.tab_num+1))
        self.tabWidget.tabBar().setTabButton(self.tab_num, self.right,self.add_Widget)
        self.tabWidget.setCurrentIndex(self.tab_num)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "HEM_signal_viewer"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab[0].tab), _translate("MainWindow", "channel 1"))
        self.add_Widget.button_add.setShortcut(_translate("MainWindow", "Ctrl+A"))
        
       
    def formReport(self):
        
        pdf = canvas.Canvas('Signals_Report.pdf')

        for c in range(self.tab_num+1):
            pdf.setTitle('Signals Report')
            pdf.line(20,825,572,825)
            pdf.line(20,30,572,30)
            pdf.line(20,825,20,30)
            pdf.line(572,825,572,30)

            pdf.setFillColorRGB(255,0,0)
            pdf.setFont('Times-Bold', 36)
            pdf.drawString(190,760,'Signals Report')

            pdf.setFillColorRGB(0,0,0)
            print('show')
            pdf.setFont('Times-Italic', 26)
            n1=self.tab[c].filename
            
            pdf.drawString(50,700,n1[70:])
            pdf.line(47,690,105,690)
            pdf.drawImage(str(c)+'.png', 120, 400, width = 380 , height = 270)

            pdf.drawString(50,380,'Spectrogram:')
            pdf.line(47,370,182,370)
            pdf.drawImage('sp'+str(c)+'.png', 120, 80, width = 380 , height = 288)

            pdf.setFont('Times-Roman', 12)
            pdf.drawString(300,40,'(1)')

            pdf.showPage()

        pdf.save()      


   


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    signal_viewer = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(signal_viewer)
    signal_viewer.show()
    sys.exit(app.exec_())
